#!/usr/bin/env python3

import sys
import os
import urllib3
import time

# T·∫Øt SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Import dependencies check
try:
    import selenium
    import requests
    import schedule
    from datetime import datetime
    print("‚úÖ All dependencies available")
except ImportError as e:
    print(f"‚ùå Missing dependency: {e}")
    sys.exit(1)

try:
    from config import CONFIG
    from scheduler_system import SchedulerSystem
    print("‚úÖ Modules loaded successfully")
except Exception as e:
    print(f"‚ùå Module loading error: {e}")
    sys.exit(1)

def main():
    print("="*60)
    print("  üè¢ ENTERPRISE SCHEDULER SYSTEM")
    print("  üî• COMPETITIVE: 20 parallel downloads")
    print("  ‚è∞ Automated monitoring at minutes 8 & 38, Stop at 16 & 46")
    print("="*60)
    
    print(f"\nüìã Configuration:")
    print(f"    üåê Target URL: {CONFIG['base_url']}")
    print(f"    ‚è∞ Kh·ªüi ch·∫°y: Ph√∫t {CONFIG['timing']['target_minutes']}")
    print(f"    üõë D·ª´ng l·∫°i: Ph√∫t {CONFIG['timing']['stop_minutes']}")
    print(f"    üìä Pre-check offset: {CONFIG['timing']['pre_check_offset']} minutes")
    print(f"    üîÑ Page reload interval: {CONFIG['timing']['page_reload_interval']}s")
    print(f"    ‚è±Ô∏è Search wait time: {CONFIG['timing']['search_wait_time']}s")
    print(f"    ü§ñ CAPTCHA service: {CONFIG['captcha']['service']}")
    print(f"    üì± Telegram: {'Enabled' if CONFIG['telegram']['enabled'] else 'Disabled'}")
    print(f"    üî• Competitive downloads: {CONFIG['download']['max_concurrent_downloads']}")
    print(f"    üéØ Strategy: .NET buttons parallel download")

    # Ki·ªÉm tra Chrome WebDriver v·ªõi timeout v√† error handling
        # Ki·ªÉm tra Chrome WebDriver v·ªõi WebDriver Manager
    print("üîß Testing Chrome WebDriver with WebDriver Manager...", flush=True)
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.chrome.service import Service
        from webdriver_manager.chrome import ChromeDriverManager
        from selenium.common.exceptions import WebDriverException, TimeoutException
        
        opts = Options()
        opts.add_argument("--headless")
        opts.add_argument("--no-sandbox")
        opts.add_argument("--disable-dev-shm-usage")
        opts.add_argument("--disable-gpu")
        
        # Auto-detect Chrome binary location
        chrome_paths = [
            "/usr/bin/google-chrome-stable",
            "/usr/bin/google-chrome",
            "/usr/bin/chromium-browser",
            "/opt/google/chrome/chrome"
        ]
        
        chrome_binary = None
        for path in chrome_paths:
            if os.path.exists(path):
                chrome_binary = path
                break
        
        if chrome_binary:
            opts.binary_location = chrome_binary
            print(f"‚úÖ Found Chrome binary: {chrome_binary}")
        
        # Use WebDriver Manager for automatic version handling
        service = Service(ChromeDriverManager().install())
        
        print("   Creating WebDriver instance with auto-version matching...", flush=True)
        driver = webdriver.Chrome(service=service, options=opts)
        print("   WebDriver created successfully!", flush=True)
        driver.quit()
        print("‚úÖ Chrome WebDriver is available with correct version")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Chrome WebDriver issue: {e}")
        print("   WebDriver Manager will handle version compatibility")
        
        # Auto-continue for service mode, ask for interactive mode
        if not sys.stdin.isatty():  # Service mode
            print("ü§ñ Service mode: Continuing anyway...")
        else:  # Interactive mode
            continue_anyway = input("Continue anyway? (y/n): ").lower() == 'y'
            if not continue_anyway:
                return

        
        try:
            print("   Creating WebDriver instance...", flush=True)
            driver = webdriver.Chrome(options=opts)
            print("   WebDriver created, testing basic functionality...", flush=True)
            driver.quit()
            signal.alarm(0)  # Cancel timeout
            print("‚úÖ Chrome WebDriver is available")
            
        except (TimeoutException, WebDriverException) as we:
            signal.alarm(0)  # Cancel timeout
            raise we
            
    except Exception as e:
        print(f"‚ö†Ô∏è Chrome WebDriver issue: {e}")
        print("   Please ensure ChromeDriver is installed and in PATH")
        
        # Auto-continue for service mode, ask for interactive mode
        if not sys.stdin.isatty():  # Service mode
            print("ü§ñ Service mode: Continuing anyway...")
        else:  # Interactive mode
            continue_anyway = input("Continue anyway? (y/n): ").lower() == 'y'
            if not continue_anyway:
                return

    # ‚úÖ COMPETITIVE MODE - Auto answer for service mode
    if not sys.stdin.isatty():  # Service mode
        competitive_mode = True  # M·∫∑c ƒë·ªãnh 'y'
        print("üî• COMPETITIVE MODE: Auto-enabled (service mode)")
    else:  # Interactive mode
        competitive_mode = input("üî• Enable COMPETITIVE MODE (immediate 20 parallel downloads)? (y/n): ").lower() == 'y'
    
    if competitive_mode:
        print("üî• COMPETITIVE MODE ENABLED")
        CONFIG['competitive'] = {
            'enabled': True,
            'max_concurrent_downloads': 20,
            'immediate_telegram': True
        }

    # ‚úÖ TEST MODE - Auto answer for service mode
    print(f"\nüß™ TEST MODE CONFIGURATION:")
    print(f"   ‚Ä¢ YES: B·ªè qua l·ªãch tr√¨nh th·ªùi gian, ch·∫°y ngay l·∫≠p t·ª©c")
    print(f"   ‚Ä¢ NO: Tu√¢n theo l·ªãch tr√¨nh (kh·ªüi ch·∫°y ph√∫t {CONFIG['timing']['target_minutes']}, d·ª´ng ph√∫t {CONFIG['timing']['stop_minutes']})")
    
    if not sys.stdin.isatty():  # Service mode
        test_mode = False  # M·∫∑c ƒë·ªãnh 'n'
        print("‚è∞ TEST MODE: Auto-disabled (service mode) - Tu√¢n theo l·ªãch tr√¨nh")
        CONFIG['timing']['test_mode'] = False
    else:  # Interactive mode
        while True:
            test_mode_input = input("üß™ B·∫≠t TEST MODE? (yes/no): ").lower().strip()
            if test_mode_input in ['yes', 'y']:
                test_mode = True
                print("‚ö° TEST MODE ENABLED - H·ªá th·ªëng s·∫Ω ch·∫°y ngay l·∫≠p t·ª©c")
                CONFIG['timing']['test_mode'] = True
                break
            elif test_mode_input in ['no', 'n']:
                test_mode = False
                print(f"‚è∞ SCHEDULE MODE - Tu√¢n theo l·ªãch tr√¨nh: kh·ªüi ch·∫°y {CONFIG['timing']['target_minutes']}, d·ª´ng {CONFIG['timing']['stop_minutes']}")
                break
            else:
                print("‚ùå Vui l√≤ng nh·∫≠p 'yes' ho·∫∑c 'no'")

    # ‚úÖ START SYSTEM - Auto answer for service mode
    if not sys.stdin.isatty():  # Service mode
        start_system = True  # M·∫∑c ƒë·ªãnh 'y'
        print("üöÄ Enterprise Scheduler System: Auto-starting (service mode)")
    else:  # Interactive mode
        start_system = input(f"\nüöÄ Start Enterprise Scheduler System? (y/n): ").lower() == 'y'
    
    if start_system:
        try:
            system = SchedulerSystem()
            if test_mode:
                # Test mode: ch·∫°y ngay l·∫≠p t·ª©c
                system.start_monitoring()
            else:
                # Schedule mode: ch·ªù ƒë√∫ng gi·ªù theo l·ªãch tr√¨nh
                print(f"‚è∞ SCHEDULE MODE: Ch·ªù ƒë·∫øn ph√∫t {CONFIG['timing']['target_minutes']} ƒë·ªÉ kh·ªüi ch·∫°y...")
                import schedule
                
                # L·∫≠p l·ªãch kh·ªüi ch·∫°y t·∫°i ph√∫t 8 v√† 38
                schedule.every().hour.at(f":{CONFIG['timing']['target_minutes'][0]:02d}").do(lambda: system.start_monitoring())
                schedule.every().hour.at(f":{CONFIG['timing']['target_minutes'][1]:02d}").do(lambda: system.start_monitoring())
                
                print(f"üìÖ L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p:")
                print(f"   üü¢ Kh·ªüi ch·∫°y: Ph√∫t {CONFIG['timing']['target_minutes'][0]} v√† {CONFIG['timing']['target_minutes'][1]} m·ªói gi·ªù")
                print(f"   üî¥ D·ª´ng l·∫°i: Ph√∫t {CONFIG['timing']['stop_minutes'][0]} v√† {CONFIG['timing']['stop_minutes'][1]} m·ªói gi·ªù")
                print(f"‚è≥ ƒêang ch·ªù th·ªùi ƒëi·ªÉm kh·ªüi ch·∫°y...")
                
                while True:
                    schedule.run_pending()
                    time.sleep(30)  # Ki·ªÉm tra m·ªói 30 gi√¢y
                    
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è System interrupted by user")
        except Exception as e:
            print(f"\nüí• System error: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("‚ùå Cancelled!")

if __name__ == "__main__":
    main()

