# pdf_processor.py
import os
import time
import glob
import shutil
from datetime import datetime
from selenium.webdriver.common.by import By
from concurrent.futures import ThreadPoolExecutor, as_completed

class PDFProcessor:
    def __init__(self, browser_manager, telegram_bot):
        self.browser = browser_manager
        self.telegram_bot = telegram_bot
        self.download_folder = f"enterprise_pdfs_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(self.download_folder, exist_ok=True)
        
    def download_pdfs_for_codes(self, codes):
        """Download PDF cho danh s√°ch m√£ s·ªë DN"""
        if not codes:
            print("‚ö†Ô∏è No codes to download")
            return
        
        print(f"üì• Starting download for {len(codes)} codes...")
        
        successful_downloads = []
        failed_downloads = []
        
        for i, code in enumerate(codes):
            try:
                print(f"üìÑ [{i+1}/{len(codes)}] Processing code: {code}")
                
                if self._download_pdf_for_code(code):
                    successful_downloads.append(code)
                    print(f"‚úÖ Successfully downloaded: {code}")
                else:
                    failed_downloads.append(code)
                    print(f"‚ùå Failed to download: {code}")
                    
                # Delay between downloads
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå Error processing code {code}: {e}")
                failed_downloads.append(code)
        
        # G·ª≠i b√°o c√°o qua Telegram
        self._send_download_report(successful_downloads, failed_downloads)
        
        return successful_downloads, failed_downloads
    
    def _download_pdf_for_code(self, code):
        """Download PDF cho m·ªôt m√£ s·ªë DN c·ª• th·ªÉ"""
        try:
            # T√¨m PDF link cho code n√†y
            pdf_selectors = [
                f"//td[contains(text(), '{code}')]/following-sibling::td//a[contains(@id, 'LnkGetPDFActive')]",
                f"//td[contains(text(), '{code}')]/following-sibling::td//input[contains(@id, 'LnkGetPDFActive')]",
                f"//tr[contains(., '{code}')]//a[contains(@id, 'LnkGetPDFActive')]",
                f"//tr[contains(., '{code}')]//input[contains(@id, 'LnkGetPDFActive')]"
            ]
            
            pdf_element = None
            for selector in pdf_selectors:
                try:
                    elements = self.browser.driver.find_elements(By.XPATH, selector)
                    if elements and elements[0].is_displayed():
                        pdf_element = elements[0]
                        break
                except:
                    continue
            
            if not pdf_element:
                print(f"‚ö†Ô∏è PDF link not found for code: {code}")
                return False
            
            # Click ƒë·ªÉ download
            self.browser.driver.execute_script("arguments[0].scrollIntoView();", pdf_element)
            time.sleep(1)
            self.browser.driver.execute_script("arguments[0].click();", pdf_element)
            
            # ƒê·ª£i file download
            time.sleep(8)
            
            # Ki·ªÉm tra file ƒë√£ download
            return self._check_and_rename_downloaded_file(code)
            
        except Exception as e:
            print(f"‚ùå Download error for {code}: {e}")
            return False
    
    def _check_and_rename_downloaded_file(self, code):
        """Ki·ªÉm tra v√† ƒë·ªïi t√™n file ƒë√£ download"""
        try:
            # T√¨m file PDF m·ªõi nh·∫•t trong th∆∞ m·ª•c download
            download_folders = glob.glob(f"{self.browser.download_folder}*")
            if not download_folders:
                print(f"‚ö†Ô∏è Download folder not found for {code}")
                return False
            
            latest_folder = max(download_folders, key=os.path.getctime)
            
            # T√¨m file PDF m·ªõi nh·∫•t
            pdf_files = glob.glob(os.path.join(latest_folder, "*.pdf"))
            if not pdf_files:
                print(f"‚ö†Ô∏è No PDF file found for {code}")
                return False
            
            latest_file = max(pdf_files, key=os.path.getctime)
            
            # ƒê·ªïi t√™n v√† di chuy·ªÉn file
            target_filename = f"{code}.pdf"
            target_path = os.path.join(self.download_folder, target_filename)
            
            # N·∫øu file ƒë√£ t·ªìn t·∫°i, th√™m s·ªë th·ª© t·ª±
            counter = 1
            while os.path.exists(target_path):
                target_filename = f"{code}_v{counter}.pdf"
                target_path = os.path.join(self.download_folder, target_filename)
                counter += 1
            
            # Di chuy·ªÉn v√† ƒë·ªïi t√™n file
            shutil.move(latest_file, target_path)
            
            print(f"üìÅ File saved as: {target_filename}")
            
            # G·ª≠i file qua Telegram
            self._send_pdf_to_telegram(target_path, code)
            
            return True
            
        except Exception as e:
            print(f"‚ùå File processing error for {code}: {e}")
            return False
    
    def _send_pdf_to_telegram(self, file_path, code):
        """G·ª≠i PDF l√™n Telegram"""
        try:
            caption = f"üìÑ <b>Enterprise PDF</b>\nüî¢ Code: <code>{code}</code>\n‚è∞ Time: {datetime.now().strftime('%H:%M:%S')}"
            
            success = self.telegram_bot.send_document(file_path, caption)
            if success:
                print(f"üì± Sent to Telegram: {code}")
            else:
                print(f"‚ö†Ô∏è Failed to send to Telegram: {code}")
                
        except Exception as e:
            print(f"‚ùå Telegram send error for {code}: {e}")
    
    def _send_download_report(self, successful, failed):
        """G·ª≠i b√°o c√°o download qua Telegram"""
        try:
            total = len(successful) + len(failed)
            success_rate = (len(successful) / total * 100) if total > 0 else 0
            
            report = f"""üìä <b>Download Report</b>
üìà Total: {total}
‚úÖ Successful: {len(successful)}
‚ùå Failed: {len(failed)}
üìä Success rate: {success_rate:.1f}%
üìÅ Folder: {self.download_folder}
‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
            
            if failed:
                failed_codes = ', '.join(failed[:10])  # Hi·ªÉn th·ªã t·ªëi ƒëa 10 m√£ l·ªói
                if len(failed) > 10:
                    failed_codes += f"... and {len(failed)-10} more"
                report += f"\n\n‚ùå Failed codes: {failed_codes}"
            
            self.telegram_bot.send_message(report)
            
        except Exception as e:
            print(f"‚ùå Report send error: {e}")
